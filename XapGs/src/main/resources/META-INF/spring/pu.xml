<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:os-core="http://www.openspaces.org/schema/core"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.0/core/openspaces-core.xsd">

	<bean id="propertiesConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	</bean>
	
	<!--
        Enables the usage of @GigaSpaceContext annotation based injection.
    -->
    <os-core:giga-space-context/>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/Prototipo" />
		<property name="username" value="postgres" />
		<property name="password" value="1234" />
	</bean>

	<!-- Hibernate SessionFactory bean. Uses the pooled data source to connect 
		to the database. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>com.payulatam.entities.Customer</value>
<!-- 				<value>com.payulatam.entities.Cuenta</value> -->
<!-- 				<value>com.payulatam.entities.Movimiento</value> -->
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- An external data source that will be responsible for persisting changes 
		done on the cluster that connects to this mirror using Hibernate. -->
	<bean id="hibernateSpaceDataSource"
		class="org.openspaces.persistency.hibernate.StatelessHibernateExternalDataSource">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="hibernateSpaceSynchronizationEndpoint" class="org.openspaces.persistency.hibernate.DefaultHibernateSpaceSynchronizationEndpointFactoryBean">
    	<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<os-core:space id="prototipo" url="/./prototipo" schema="persistent" 
		external-data-source="hibernateSpaceDataSource" >
<!-- 		<property name="spaceDataSource" ref="hibernateSpaceDataSource" /> -->
	</os-core:space>
	
<!-- 	<os-core:embedded-space id="space" name="prototipo" schema="persistent" space-data-source="hibernateSpaceDataSource" -->
<!--               space-sync-endpoint="hibernateSpaceSynchronizationEndpoint" /> -->
<!-- 	    <os-core:properties> -->
<!-- 	        <props> -->
<!-- 	            <prop key="cluster-config.cache-loader.external-data-source">true</prop> -->
<!-- 	            <prop key="cluster-config.cache-loader.central-data-source">true</prop> -->
<!-- 	        </props> -->
<!-- 	    </os-core:properties> -->
<!-- 	</os-core:embedded-space> -->

    <!--
        Defines a distributed transaction manager.
    -->
<!--      <os-core:distributed-tx-manager id="transactionManager"/> -->

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace.
    -->
<!--     <os-core:giga-space id="gigaSpace" space="prototipo" tx-manager="transactionManager"/> -->

    <!--
        The data processor bean
    -->
<!--     <bean id="dataProcessor" class="com.payulatam.pu.Processor"/> -->
   

    <!--
        A polling event container that perfoms (by default) polling take operations against
        the space using the provided template (in our case, and the non processed data objects).
        Once a match is found, the data processor bean event listener is triggered using the
        annotation adapter.
    -->
<!--     <os-events:polling-container id="dataProcessorPollingEventContainer" giga-space="gigaSpace"> -->
<!--         <os-events:tx-support tx-manager="transactionManager"/> -->
<!--         <os-core:template> -->
<!--             <bean class="com.mycompany.app.common.Data"> -->
<!--                 <property name="processed" value="false"/> -->
<!--             </bean> -->
<!--         </os-core:template> -->
<!--         <os-events:listener> -->
<!--             <os-events:annotation-adapter> -->
<!--                 <os-events:delegate ref="dataProcessor"/> -->
<!--             </os-events:annotation-adapter> -->
<!--         </os-events:listener> -->
<!--     </os-events:polling-container> -->

</beans>